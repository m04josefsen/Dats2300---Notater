Algoritmer og Datastrukturer
Tre obliger
-To gruppe
-En individuell

Eksamen:
-En flervalg del
-En langsvar del
-3 timer eksamen

Algoritmer:
En algoritme er en oppskrift, en prosedyre på  hvordan gjøre noe spesifikst
Et mål
En metode for å oppnå målet.
Eks: Vi har en tabell med tall, vi vil finne største tall i tabellen.
Eks: [1,3,2,7,5,0,4,4,2,-3].
Algoritme : Vi husker til en hver tid største tall vi har sett til nå, og oppdaterer dette hver gang vi ser et større tall.
Implementasjon: Må skrive kode som gjør dette.
Algoritme: Vi sorter lista, og så ser vi hva siste tall er. (Litt juks. Hvordan sorterer vi.)
Denne algoritmen er (antagelig) destruktiv. Den «ødelegger» den orginale lista.
Se kode for implementasjon

Hva gjør en algoritme god?
-Hastighet
-Nøyaktighet
-Pålitelighet
-Minebruk 
-Forstårlig 

Hvordan måler vi hastighet til en algoritme?
1)Vi tester.
2)Vil ha et teoretisk grunnlagt for å finne raskeste algoritme.
Hvor mange operasjoner gjør datamaskinen?
Egentlig interesert i en generell formell for antall operasjoner som utføres dersom tabellen vi sneder inn er en viss størelse.

La oss telle: 
Linje 9: to operasjoner
Linje 10: 1 op, 10 op i<tabell.length, 9 i++
Linje 11: to operasjoner per loop, altså 2*9
Linje 12: 2*? (i dette tilfelle er ? lik 2)
Linje 15: 1
45 operasjoner til sammen.
Hvordan generaliserer vi dette? Hva er savret på en tabell med n elementer? 
2 + 1+ n + (n-1) + 2*(n-1) + 2*k, hvor k er antall ganger vi ender opp i if- testen, + 1
4n + 2k+1
Hva gjør vi med k?
-Best-case
-Worst-case
-Average-case
Best-case: Hvor god er vår algoritme når den gjør det best?
For oss: k = 0, 4n+1 steg
Worst-case: Hvor god er vår algortime bnår den gjør det absolutt verst?
For oss: k = n-1, 4n+2(n-1)+1 = 6n-1 steg
Average-case: 
For en tilfeldig tabell med n elementer, hvor mange ganger må vi inn i if-testen?
Vi tester med noen små eksempler: 
n = 1 : {1}              Vi vil aldri finne et større element, 0 ganger. Gjennomsnitt: 0/1 = 0.

n = 2 : {1,2} , {2,1}                           Gjennomsnittet: 1/2
                1 gang    0 ganger
n = 3 : {1,2,3} , {1,3,2} , {2,1,3} , {2,3,1} , {3,1,2} , {3,2,1}          Gjennomsnitt: 5/6 = ½+1/3 
                   2               1            1                1              0               0 
n = 4 : 24 forsjkellige rekkefølger, gjennomsnitt: ½+1/3+1/4
Viser seg generelt at gjennomsnittlig antall oppdateringer er gitt ved for n, ½+1/3+1/4+…+1/n
Kalles for harmoniske tall,
Hn = 1+1/2+1/3+..+1/n
Gjennomsnittlig bruker algoritmen vår:
4n + 2*(Hn-1)+1 = 4n+2Hn-1
Fra matematikk: Hn = log(n) + 0.577
Bruker da ca. 4n+2logn + 0.157